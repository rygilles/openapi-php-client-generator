{% include 'includes/classHeader.php.twig' %}
{
	/**
	 * API base url for requests
	 *
	 * @var string
	 */
	protected $apiBaseUrl;

	/**
	 * Guzzle client for API requests
	 *
	 * @var GuzzleClient;
	 */
	protected $httpClient;

{% if useBearerToken == true %}
	/**
	 * Bearer authentication access token
	 *
	 * @var string
	 */
	protected $bearerToken;

{% endif %}
	/**
	 * Map of global headers to use with every requests
	 *
	 * @var string[]
	 */
	protected $globalHeaders = [];

{% for manager in managers %}
	/**
	 * {{ manager.name }} manager
	 *
	 * @var {{ manager.className }}
	 */
	protected ${{ manager.lowerCamelCaseClassName }};

{% endfor %}
	/**
	 * API Client class constructor
	 *
{% if useBearerToken == true %}
	 * @param string $bearerToken Bearer authentication access token
{% endif %}
	 * @param string $apiBaseUrl API base url for requests
	 * @param string[] $globalHeaders Map of global headers to use with every requests
	 */
	public function __construct({% if useBearerToken == true %}$bearerToken, {% endif %}$apiBaseUrl = '{{ apiBaseUrl }}', $globalHeaders = [])
	{
		$this->apiBaseUrl = $apiBaseUrl;
		$this->globalHeaders = $globalHeaders;

{% if useBearerToken == true %}
		$this->bearerToken = $bearerToken;

		$stack = new HandlerStack();
		$stack->setHandler(new CurlHandler());

		$stack->push(Middleware::mapRequest(function (RequestInterface $request) {
			if (count($this->globalHeaders) > 0) {
				$request = $request->withHeader('Authorization', 'Bearer ' . $this->bearerToken);
				foreach ($this->globalHeaders as $header => $value) {
					$request = $request->withHeader($header, $value);
				}
				return $request;
			} else {
				return $request->withHeader('Authorization', 'Bearer ' . $this->bearerToken);
			}
		}));

		$this->httpClient = new GuzzleClient([
			'handler' => $stack,
			'base_uri' => $apiBaseUrl
		]);
{% else %}
		if (count($this->globalHeaders) > 0) {
			$stack = new HandlerStack();
			$stack->setHandler(new CurlHandler());

			$stack->push(Middleware::mapRequest(function (RequestInterface $request) {
				foreach ($this->globalHeaders as $header => $value) {
					$request = $request->withHeader($header, $value);
				}
				return $request;
			}));

			$this->httpClient = new GuzzleClient([
				'handler' => $stack,
				'base_uri' => $apiBaseUrl
			]);
		} else {
			$this->httpClient = new GuzzleClient([
				'base_uri' => $apiBaseUrl
			]);
		}
{% endif %}

{% for manager in managers %}
		$this->{{ manager.lowerCamelCaseClassName }} = new {{ manager.className }}($this);
{% endfor %}
	}

	/**
	 * Return the API base url
	 *
	 * @return string
	 */
	public function getApiBaseUrl()
	{
		return $this->apiBaseUrl;
	}

	/**
	 * Return the map of global headers to use with every requests
	 *
	 * @return string[]
	 */
	public function getGlobalHeaders()
	{
		return $this->globalHeaders;
	}

	/**
	 * Return the Guzzle HTTP client
	 *
	 * @return GuzzleClient
	 */
	public function getHttpClient()
	{
		return $this->httpClient;
	}

{% for manager in managers %}
	/**
	 * Return the {{ manager.name }} manager
	 *
	 * @return {{ manager.className }}
	 */
	public function {{ manager.className }}()
	{
		return $this->{{ manager.lowerCamelCaseClassName }};
	}
{% if not loop.last %}{{ "\t\n" }}{% endif %}
{% endfor %}
}