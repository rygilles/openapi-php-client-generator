{% include 'includes/classHeader.php.twig' %}
{
	/**
	 * API client
	 *
	 * @var ApiClient
	 */
	protected $apiClient;

	/**
	 * {{ classPhpDocTitle }} constructor
	 *
	 * @param ApiClient $apiClient API Client to use for this manager requests
	 */
	public function __construct(ApiClient $apiClient)
	{
		$this->apiClient = $apiClient;
	}

	/**
	 * Return the API client used for this manager requests
	 *
	 * @return ApiClient
	 */
	public function getApiClient()
	{
		return $this->apiClient;
	}

{% if routes is defined %}
{% for route in routes %}
{% include 'includes/functionPhpDoc.php.twig' with {'route': route} %}
	public function {{ route.operation.operationId }}({% include 'includes/functionDefinitionParameters.php.twig' with {'route': route} %})
	{
{% if route.inPathParameters|length > 0 %}
		$path = '{{ route.path }}';

		$pathReplacements = [
{% for parameterName, phpCode in route.inPathParameters %}
			'{{ '{' ~ parameterName ~ '}' }}' => {{ phpCode|raw }},
{% endfor %}
		];

		$url = str_replace(array_keys($pathReplacements), array_values($pathReplacements), $path);
{% else %}
		$url = '{{ route.path }}';
{% endif %}

		$request = $this->apiClient->getHttpClient()->request('{{ route.httpMethod }}', $url);

		if ($request->getStatusCode() != {{ route.exceptedResponseCode }}) {
			throw new ApiException('Unexpected response HTTP code : ' . $request->getStatusCode() . ' instead of {{ route.exceptedResponseCode }}');
		}

		return $request;
	}
{% if not loop.last %}{{ "\t\n" }}{% endif %}
{% endfor %}
{% endif %}
}
